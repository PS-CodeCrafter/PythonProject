name: Python CI (Multi-Project, Auto Main Detection)

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  lint-and-run:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.9]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies for each mini-project (if any)
        run: |
          set -e
          for project in $(find . -type f -name "requirements.txt" -exec dirname {} \;); do
            echo "---- Installing for $project ----"
            cd "$project"
            python -m pip install --upgrade pip
            pip install -r requirements.txt || echo "No dependencies to install for $project"
            cd -
          done
          echo "✅ Dependency installation step complete."

      - name: Run syntax check on all Python files
        run: |
          python -m pip install pyflakes
          pyflakes .

      - name: Detect and run main scripts
        run: |
          set -e
          for project in $(find . -type d ! -path "*/\.*"); do
            candidate=""
            if [ -f "$project/main.py" ]; then
              candidate="$project/main.py"
            elif [ -f "$project/app.py" ]; then
              candidate="$project/app.py"
            elif [ -f "$project/index.py" ]; then
              candidate="$project/index.py"
            else
              py_files=$(find "$project" -maxdepth 1 -type f -name "*.py")
              count=$(echo "$py_files" | wc -l)
              if [ "$count" -eq 1 ]; then
                candidate="$py_files"
              fi
            fi

            if [ -n "$candidate" ]; then
              echo "---- Running $candidate ----"
              python "$candidate" || echo "⚠️ $candidate exited with an error"
            fi
          done

  run-tests:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.9]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies for tests (if any)
        run: |
          python -m pip install --upgrade pip
          # Add your test dependencies here, e.g.
          # pip install -r requirements-test.txt

      - name: Run tests in tests folder
        run: |
          export PYTHONPATH="${PYTHONPATH}:$(pwd)"
          python -m unittest discover -s tests -p "*.py"


